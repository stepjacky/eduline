<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.jackysoft.edu.mapper.ExamScoreMapper">
   
        <select id="findAll" resultType="examscore">
        select * from jq_examscore;
    </select>
    
        
    <select id="findList" parameterType="querybuilder" resultType="examscore">
        select * from jq_examscore where ${qc.where};
    </select>
    
      <select id="findByQuery" resultType="examscore">
       select * from jq_examscore where ${qc.where} limit ${start},${offset};
    </select>
    	
	<select id="findPageList" resultType="examscore">
	    select * from jq_examscore limit ${start},${offset};
	</select>
	
		
	<select id="findById" parameterType="string" resultType="examscore">
	   select * from jq_examscore where id=#{id};
	</select>
	
		
	<select id="counts" resultType="long">
	   select count(*) from jq_examscore;
	</select>	
	
		
	<select id="countByQuery" parameterType="querybuilder" resultType="long">
	   select count(*) from jq_examscore where ${qc.where};
	</select>
	
	     
    <insert id="insert" parameterType="examscore">
       insert into jq_examscore (
       `monthlyName`,
       `courseName`,
       `student`,      
       `studentName`,
       `monthly`,
       `course`,
       `courseType`,
       `semester`,
       `scoreValue`,      
       `grade`,
       `gradeName`,
       `groupId`,
       `inyear`,
       `jors`,
       `remark`,
       `id`) values(
       #{monthlyName},
       #{courseName},
       #{student},     
       #{studentName},
       #{monthly},
       #{course},
       #{courseType},
       #{semester},
       #{scoreValue},      
       #{grade},
       #{gradeName},
       #{groupId},
       #{inyear},
       #{jors},
       #{remark},
       #{id}
       )       
       ON DUPLICATE KEY UPDATE
       scoreValue=VALUES(`scoreValue`),
       remark=VALUES(`remark`),
       inyear=VALUES(`inyear`),
       groupId=VALUES(`groupId`);
    </insert> 
   
    
		
	<delete id="delete" parameterType="string">
	   delete from jq_examscore where id=#{id};
	</delete>
	
	
    <delete id="deleteByQuery" parameterType="querybuilder">
       delete from jq_examscore where ${qc.where};
    </delete>
    
    <select id="reportCourse" resultType="course">
        <![CDATA[ 
       select
   course id,
   courseName name,
   courseType ctype
 from jq_examscore 
 where 
  jors=#{jors}
  and courseType<=1 
  and student=#{user} 
 group by course;
 ]]>
    </select>
    
    <select id="reportCard" parameterType="string" resultType="examscore">
     <![CDATA[   
     select courseName ,
 sum(enabled) as enabled,
 sum(monthly) monthly,
 grade,
 semester,
 course,
 courseType,
  student,
 studentName,
 inyear,
 jors,
 (
    case courseType
    	when 0 then sum(scoreValue)
    	else max(scoreValue)    
    end 
 
 ) as scoreValue
  from(
select
 courseName ,
 if(monthly<=2,0,1) enabled,
 monthly,
 grade,
 semester,
 course,
 courseType,
 student,
 studentName,
 inyear,
 jors,
 ( case monthly
    when 0 then if(courseType=0,scoreValue*0.1,scoreValue)
	when 1 then if(courseType=0,scoreValue*0.3,scoreValue)
	when 2 then if(courseType=0,scoreValue*0.1,scoreValue)
	when 3 then if(courseType=0,scoreValue*0.5,scoreValue) 
   end) as scoreValue
   
 from jq_examscore where courseType<=1 and student=#{user}

order by grade, semester,course,monthly,scoreValue desc 
) gs
group by grade, semester ,course;
]]> 
    </select>
    
    
    <update id="updateScoreState">
     	<![CDATA[     	
		call sp_resortPart(${year},${grade},${semester},${monthly});		
		]]>       
    </update>
    
  
 
    
    <select id="findStudentExamInfo" parameterType="string" resultType="examscore">
       select * from jq_examscore
	   where student=#{user}
	   group by inyear desc,grade desc,semester desc ,monthly desc;
    </select>
    
   
    <select id="findExamDetail" parameterType="examscore" resultType="examscore">
        select  *
        from jq_examscore
		where student=#{es.student}
		and inyear=#{es.inyear}
		and grade=#{es.grade}
		and semester=#{es.semester}
		and monthly=#{es.monthly};		      
    </select>
    
    <select id="findScoreInfo" resultType="scoreinfo">
        select 
          e.courseName course,
          concat(g.teacherName,'(',g.teacher,')') teacher,
          e.scoreValue scoreValue,
          e.remark remark 
        from jq_examscore e
        left join jq_groupmember g on g.groupId=e.groupId
        where e.student=#{es.student}
		and e.inyear=#{es.inyear}
		and e.grade=#{es.grade}
		and e.semester=#{es.semester}
		and e.monthly=#{es.monthly}
		group by course;      
     
       
    </select>    
        
        
    <select id="findExamTotalDetail" resultType="sortedtotalscore" parameterType="sortedtotalscore">
        select * from jq_sortedtotalscore
        where inyear=#{es.inyear}
        and student=#{es.student}
        and grade=#{es.grade}
        and semester=#{es.semester}
        and monthly=#{es.monthly}
        limit 1;
    </select>    
        
    
    
    <select id="findInYearExamInfo" resultType="examscore">
      select inyear,grade,gradeName,semester,monthly,monthlyName  from jq_examscore
where inyear=#{inyear}
group by grade desc ,semester desc,monthly desc
limit #{page},1;
    
    </select>  
    
    <select id="findInYearExamInfoCount" resultType="long">
      select count(*) from (  select * from jq_examscore
where inyear=#{inyear}
group by grade desc ,semester desc,monthly desc
) d;
    </select>
    
    <select id="findInYearDetails" parameterType="examscore" resultType="inyearscoredetail">
         
<![CDATA[
    select 
t.student,t.studentName,
group_concat(s.course separator ',') idHtml,
group_concat(round(IFNULL(g.scoreValue,0)) separator ',') scoreHtml,
group_concat(substr(s.courseName,-2) separator ',') courseHtml,
t.inyear,t.grade,
t.semester,t.monthly,
t.totalScore,t.avgScore,t.totalSorted
from jq_courseingrade s 
left join jq_sortedtotalscore t 
on  t.inyear=#{es.inyear} and t.grade=#{es.grade} and t.semester=#{es.semester} and t.monthly=#{es.monthly}
left join jq_examscore g 
on  g.student= t.student and   g.inyear=#{es.inyear} and g.grade=#{es.grade} and g.semester=#{es.semester} 
and g.monthly=#{es.monthly} and g.course = s.course 
where s.inyear=#{es.inyear} and s.grade=#{es.grade}
group by student
order by totalSorted
;
]]>
   
    </select>  
    
    <select id="findScoredStudent" parameterType="examscore" resultType="examscore">
        select * from jq_examscore
		where inyear=#{es.inyear}
		and grade=#{es.grade}
		and semester=#{es.semester}
		and monthly=#{es.monthly}
		and course=#{es.course};
    </select>
    
    
    
    <select id="findGradedSeries" parameterType="examscore" resultType="sortedtotalscore">
        select student,studentName,avgScore
from jq_sortedtotalscore
where inyear=#{es.inyear} and grade=#{es.grade} and semester=#{es.semester} and monthly=#{es.monthly}
order by avgScore desc ;
    </select>
    
        
</mapper>